{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "json-e",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "The central idea is to treat a data structure as a \"template\" and transform it, using another data structure as context, to produce an output data structure.\nThere are countless libraries to do this with strings, such as mustache. What makes JSON-e unique is that it operates on data structures, not on their textual representation. This allows input to be written in a number of formats (JSON, YAML, etc.) or even generated dynamically. It also means that the output cannot be \"invalid\", even when including large chunks of contextual data.\nJSON-e is also designed to be safe for use on untrusted data. It never uses eval or any other function that might result in arbitrary code execution. It also disallows unbounded iteration, so any JSON-e rendering operation will finish in finite time.\n",
   "dev_url": "https://github.com/json-e/json-e",
   "home": "https://json-e.js.org",
   "license": "MPL-2.0",
   "license_family": "MOZILLA",
   "license_file": "src/LICENSE",
   "summary": "A data-structure parameterization system written for embedding context in JSON objects"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "cd dist && /usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . --no-deps"
  },
  "extra": {
   "recipe-maintainers": [
    "bollwyvl"
   ]
  },
  "package": {
   "name": "json-e",
   "version": "4.5.0"
  },
  "requirements": {
   "host": [
    "python >=3.6",
    "pip"
   ],
   "run": [
    "python >=3.6"
   ]
  },
  "source": [
   {
    "folder": "dist",
    "sha256": "e733ce77b4acbbc2c48211057f8cb5af45999e6be4ce0f07585c5580df45826e",
    "url": "https://pypi.io/packages/source/j/json-e/json-e-4.5.0.tar.gz"
   },
   {
    "folder": "src",
    "sha256": "f311ff5b8a447a39bcf39281d6d01ddd653a03e7ac5c524add7b9f5052eee9d2",
    "url": "https://github.com/json-e/json-e/archive/refs/tags/v4.5.0.tar.gz"
   }
  ],
  "test": {
   "commands": [
    "python -m pip check",
    "cd src/py/test && nosetests"
   ],
   "imports": [
    "jsone"
   ],
   "requires": [
    "freezegun",
    "hypothesis",
    "nose",
    "pyyaml",
    "python-dateutil",
    "pep8",
    "pip"
   ],
   "source_files": [
    "src/py/test",
    "src/specification.yml"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "freezegun",
    "hypothesis",
    "nose",
    "pep8",
    "pip",
    "python-dateutil",
    "pyyaml"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "The central idea is to treat a data structure as a \"template\" and transform it, using another data structure as context, to produce an output data structure.\nThere are countless libraries to do this with strings, such as mustache. What makes JSON-e unique is that it operates on data structures, not on their textual representation. This allows input to be written in a number of formats (JSON, YAML, etc.) or even generated dynamically. It also means that the output cannot be \"invalid\", even when including large chunks of contextual data.\nJSON-e is also designed to be safe for use on untrusted data. It never uses eval or any other function that might result in arbitrary code execution. It also disallows unbounded iteration, so any JSON-e rendering operation will finish in finite time.\n",
   "dev_url": "https://github.com/json-e/json-e",
   "home": "https://json-e.js.org",
   "license": "MPL-2.0",
   "license_family": "MOZILLA",
   "license_file": "src/LICENSE",
   "summary": "A data-structure parameterization system written for embedding context in JSON objects"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": "cd dist && /usr/share/miniconda3/envs/cf-scripts/conda-bld/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_/bin/python -m pip install . --no-deps"
  },
  "extra": {
   "recipe-maintainers": [
    "bollwyvl"
   ]
  },
  "package": {
   "name": "json-e",
   "version": "4.5.0"
  },
  "requirements": {
   "host": [
    "python >=3.6",
    "pip"
   ],
   "run": [
    "python >=3.6"
   ]
  },
  "source": [
   {
    "folder": "dist",
    "sha256": "e733ce77b4acbbc2c48211057f8cb5af45999e6be4ce0f07585c5580df45826e",
    "url": "https://pypi.io/packages/source/j/json-e/json-e-4.5.0.tar.gz"
   },
   {
    "folder": "src",
    "sha256": "f311ff5b8a447a39bcf39281d6d01ddd653a03e7ac5c524add7b9f5052eee9d2",
    "url": "https://github.com/json-e/json-e/archive/refs/tags/v4.5.0.tar.gz"
   }
  ],
  "test": {
   "commands": [
    "python -m pip check",
    "cd src/py/test && nosetests"
   ],
   "imports": [
    "jsone"
   ],
   "requires": [
    "freezegun",
    "hypothesis",
    "nose",
    "pyyaml",
    "python-dateutil",
    "pep8",
    "pip"
   ],
   "source_files": [
    "src/py/test",
    "src/specification.yml"
   ]
  }
 },
 "name": "json-e",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "json-e"
  ]
 },
 "parsing_error": false,
 "pr_info": {
  "__lazy_json__": "pr_info/json-e.json"
 },
 "raw_meta_yaml": "{% set version = \"4.5.0\" %}\n\npackage:\n  name: json-e\n  version: {{ version }}\n\nsource:\n  - folder: dist\n    url: https://pypi.io/packages/source/j/json-e/json-e-{{ version }}.tar.gz\n    sha256: e733ce77b4acbbc2c48211057f8cb5af45999e6be4ce0f07585c5580df45826e\n  - folder: src\n    url: https://github.com/json-e/json-e/archive/refs/tags/v{{ version }}.tar.gz\n    sha256: f311ff5b8a447a39bcf39281d6d01ddd653a03e7ac5c524add7b9f5052eee9d2\n\nbuild:\n  noarch: python\n  number: 0\n  script: cd dist && {{ PYTHON }} -m pip install . --no-deps\n\nrequirements:\n  host:\n    - python >=3.6\n    - pip\n  run:\n    - python >=3.6\n\ntest:\n  source_files:\n    - src/py/test\n    - src/specification.yml\n  requires:\n    - freezegun\n    - hypothesis\n    - nose\n    - pyyaml\n    - python-dateutil\n    - pep8\n    - pip\n  imports:\n    - jsone\n  commands:\n    - python -m pip check\n    - cd src/py/test && nosetests\n\nabout:\n  home: https://json-e.js.org\n  license: MPL-2.0\n  license_family: MOZILLA\n  license_file: src/LICENSE\n  summary: A data-structure parameterization system written for embedding context in JSON objects\n  dev_url: https://github.com/json-e/json-e\n  description: >\n    The central idea is to treat a data structure as a \"template\" and transform it, using another data structure as context, to produce an output data structure.\n\n    There are countless libraries to do this with strings, such as mustache. What makes JSON-e unique is that it operates on data structures, not on their textual representation. This allows input to be written in a number of formats (JSON, YAML, etc.) or even generated dynamically. It also means that the output cannot be\n    \"invalid\", even when including large chunks of contextual data.\n\n    JSON-e is also designed to be safe for use on untrusted data. It never uses eval or any other function that might result in arbitrary code execution. It also disallows unbounded iteration, so any JSON-e rendering operation will finish in finite time.\n\nextra:\n  recipe-maintainers:\n    - bollwyvl\n",
 "req": {
  "__set__": true,
  "elements": [
   "pip",
   "python"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "freezegun",
    "hypothesis",
    "nose",
    "pep8",
    "pip",
    "python-dateutil",
    "pyyaml"
   ]
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": []
  },
  "host": {
   "__set__": true,
   "elements": [
    "pip",
    "python >=3.6"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "python >=3.6"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "freezegun",
    "hypothesis",
    "nose",
    "pep8",
    "pip",
    "python-dateutil",
    "pyyaml"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/j/json-e/json-e-4.5.0.tar.gz",
 "version": "4.5.0",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/json-e.json"
 }
}