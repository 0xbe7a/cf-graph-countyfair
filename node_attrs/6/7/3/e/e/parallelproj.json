{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "default"
  }
 },
 "feedstock_name": "parallelproj",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "home": "https://github.com/gschramm/parallelproj",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "parallelized TOF PET projectors"
  },
  "build": {
   "ignore_run_exports": [
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit"
   ],
   "number": "0",
   "run_exports": [
    "parallelproj",
    "parallelproj * *cpu*",
    "parallelproj",
    "parallelproj * *cuda*",
    "parallelproj",
    "parallelproj * *cuda*",
    "parallelproj",
    "parallelproj * *cuda*",
    "parallelproj",
    "parallelproj * *cuda*"
   ],
   "string": "cuda11.1h1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm"
   ]
  },
  "package": {
   "name": "parallelproj",
   "version": "1.2.15"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python"
   ],
   "host": [
    "libgomp",
    "libgomp",
    "libgomp",
    "libgomp",
    "libgomp"
   ],
   "run": [
    "__cuda",
    "__cuda",
    "__cuda",
    "__cuda"
   ]
  },
  "source": {
   "sha256": "f8df33b05516145cdce773f3088dd2f9e92a7e081acf8395a3b2b9ffd74f5345",
   "url": "https://github.com/gschramm/parallelproj/archive/refs/tags/v1.2.15.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_cuda.h",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_cuda.h",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_cuda.h",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_cuda.h"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja",
    "python"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libgomp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "__cuda"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "home": "https://github.com/gschramm/parallelproj",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "parallelized TOF PET projectors"
  },
  "build": {
   "ignore_run_exports": [
    "cudatoolkit"
   ],
   "number": "0",
   "run_exports": [
    "parallelproj",
    "parallelproj * *cpu*"
   ],
   "string": "cpuh1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "gschramm"
   ]
  },
  "package": {
   "name": "parallelproj",
   "version": "1.2.15"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python"
   ],
   "host": [
    "libgomp"
   ],
   "run": []
  },
  "source": {
   "sha256": "f8df33b05516145cdce773f3088dd2f9e92a7e081acf8395a3b2b9ffd74f5345",
   "url": "https://github.com/gschramm/parallelproj/archive/refs/tags/v1.2.15.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "ninja",
    "python"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libgomp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": []
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "home": "https://github.com/gschramm/parallelproj",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "parallelized TOF PET projectors"
  },
  "build": {
   "ignore_run_exports": [
    "cudatoolkit"
   ],
   "number": "0",
   "run_exports": [
    "parallelproj",
    "parallelproj * *cpu*"
   ],
   "string": "cpuh1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "gschramm"
   ]
  },
  "package": {
   "name": "parallelproj",
   "version": "1.2.15"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python"
   ],
   "host": [
    "libgomp"
   ],
   "run": []
  },
  "source": {
   "sha256": "f8df33b05516145cdce773f3088dd2f9e92a7e081acf8395a3b2b9ffd74f5345",
   "url": "https://github.com/gschramm/parallelproj/archive/refs/tags/v1.2.15.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake"
   ]
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "ninja",
    "python"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libgomp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": []
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "home": "https://github.com/gschramm/parallelproj",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "parallelized TOF PET projectors"
  },
  "build": {
   "ignore_run_exports": [
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit"
   ],
   "number": "0",
   "run_exports": [
    "parallelproj",
    "parallelproj * *cpu*",
    "parallelproj",
    "parallelproj * *cuda*",
    "parallelproj",
    "parallelproj * *cuda*",
    "parallelproj",
    "parallelproj * *cuda*",
    "parallelproj",
    "parallelproj * *cuda*",
    "parallelproj",
    "parallelproj * *cpu*",
    "parallelproj",
    "parallelproj * *cpu*",
    "parallelproj",
    "parallelproj * *cpu*",
    "parallelproj",
    "parallelproj * *cpu*",
    "parallelproj",
    "parallelproj * *cuda*",
    "parallelproj",
    "parallelproj * *cpu*",
    "parallelproj",
    "parallelproj * *cuda*",
    "parallelproj",
    "parallelproj * *cuda*",
    "parallelproj",
    "parallelproj * *cuda*"
   ],
   "string": "cuda11.0h1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm"
   ]
  },
  "package": {
   "name": "parallelproj",
   "version": "1.2.15"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python"
   ],
   "host": [
    "libgomp",
    "libgomp",
    "libgomp",
    "libgomp",
    "libgomp",
    "libgomp",
    "libgomp",
    "llvm-openmp",
    "llvm-openmp"
   ],
   "run": [
    "__cuda",
    "__cuda",
    "__cuda",
    "__cuda",
    "__cuda",
    "__cuda",
    "__cuda",
    "__cuda"
   ]
  },
  "source": {
   "sha256": "f8df33b05516145cdce773f3088dd2f9e92a7e081acf8395a3b2b9ffd74f5345",
   "url": "https://github.com/gschramm/parallelproj/archive/refs/tags/v1.2.15.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_cuda.h",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_cuda.h",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_cuda.h",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_cuda.h",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1"
   ]
  }
 },
 "name": "parallelproj",
 "osx_64_meta_yaml": {
  "about": {
   "home": "https://github.com/gschramm/parallelproj",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "parallelized TOF PET projectors"
  },
  "build": {
   "ignore_run_exports": [
    "cudatoolkit"
   ],
   "number": "0",
   "run_exports": [
    "parallelproj",
    "parallelproj * *cpu*"
   ],
   "string": "cpuh1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "gschramm"
   ]
  },
  "package": {
   "name": "parallelproj",
   "version": "1.2.15"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python"
   ],
   "host": [
    "llvm-openmp"
   ],
   "run": []
  },
  "source": {
   "sha256": "f8df33b05516145cdce773f3088dd2f9e92a7e081acf8395a3b2b9ffd74f5345",
   "url": "https://github.com/gschramm/parallelproj/archive/refs/tags/v1.2.15.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "ninja",
    "python"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "llvm-openmp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": []
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "home": "https://github.com/gschramm/parallelproj",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "parallelized TOF PET projectors"
  },
  "build": {
   "ignore_run_exports": [
    "cudatoolkit"
   ],
   "number": "0",
   "run_exports": [
    "parallelproj",
    "parallelproj * *cpu*"
   ],
   "string": "cpuh1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "gschramm"
   ]
  },
  "package": {
   "name": "parallelproj",
   "version": "1.2.15"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python"
   ],
   "host": [
    "llvm-openmp"
   ],
   "run": []
  },
  "source": {
   "sha256": "f8df33b05516145cdce773f3088dd2f9e92a7e081acf8395a3b2b9ffd74f5345",
   "url": "https://github.com/gschramm/parallelproj/archive/refs/tags/v1.2.15.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT",
    "test -f $PREFIX/include/parallelproj_c.h",
    "test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "ninja",
    "python"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "llvm-openmp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": []
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "parallelproj"
  ]
 },
 "parsing_error": false,
 "pr_info": {
  "__lazy_json__": "pr_info/parallelproj.json"
 },
 "raw_meta_yaml": "{% set name = \"parallelproj\" %}\n{% set version = \"1.2.15\" %}\n{% set build_number = 0 %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/gschramm/parallelproj/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: f8df33b05516145cdce773f3088dd2f9e92a7e081acf8395a3b2b9ffd74f5345\n\nbuild:\n  run_exports:\n    - {{ pin_subpackage( name|lower, max_pin='x.x') }}\n    - {{ name }} * *cuda*  # [cuda_compiler_version != \"None\"]\n    - {{ name }} * *cpu*  # [cuda_compiler_version == \"None\"]\n  number: {{ build_number }}\n  ignore_run_exports:\n    - cudatoolkit\n  string: cpuh{{ PKG_HASH }}_{{ build_number }}  # [cuda_compiler_version == \"None\"]\n  string: cuda{{ cuda_compiler_version|string }}h{{ PKG_HASH }}_{{ build_number }}  # [cuda_compiler_version != \"None\"]\n\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}  # [cuda_compiler_version != \"None\"]\n    - {{ compiler('cuda') }}  # [cuda_compiler_version != \"None\"]\n    - cmake >=3.23\n    - ninja\n    - python\n  host:\n    - libgomp      # [linux]\n    - llvm-openmp  # [osx]\n  run:\n    - __cuda  # [cuda_compiler_version != \"None\"]\ntest:\n  commands:\n    - test -f $PREFIX/lib/libparallelproj_c$SHLIB_EXT  # [unix]\n    - test -f $PREFIX/include/parallelproj_c.h  # [unix]\n    - test -f $PREFIX/lib/cmake/parallelproj/parallelprojConfig.cmake  # [unix]\n    - test -f $PREFIX/lib/libparallelproj_cuda$SHLIB_EXT  # [linux and cuda_compiler_version != \"None\"]\n    - test -f $PREFIX/include/parallelproj_cuda.h  # [linux and cuda_compiler_version != \"None\"]\n    - if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1  # [win]\n    - if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1  # [win]\n    - if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1  # [win]\n    - if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1  # [win]\n\nabout:\n  home: https://github.com/gschramm/parallelproj\n  license: MIT\n  license_file: LICENSE\n  summary: parallelized TOF PET projectors\n\nextra:\n  recipe-maintainers:\n    - gschramm\n",
 "req": {
  "__set__": true,
  "elements": [
   "__cuda",
   "c_compiler_stub",
   "cmake",
   "cuda_compiler_stub",
   "cxx_compiler_stub",
   "libgomp",
   "llvm-openmp",
   "ninja",
   "python"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja",
    "python"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "ctng-compilers",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "libgomp",
    "llvm-openmp",
    "openmp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "__cuda",
    "c_compiler_stub",
    "ctng-compilers",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "openmp"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake >=3.23",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja",
    "python"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "libgomp",
    "llvm-openmp"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "__cuda"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/gschramm/parallelproj/archive/refs/tags/v1.2.15.tar.gz",
 "version": "1.2.15",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/parallelproj.json"
 },
 "win_64_meta_yaml": {
  "about": {
   "home": "https://github.com/gschramm/parallelproj",
   "license": "MIT",
   "license_file": "LICENSE",
   "summary": "parallelized TOF PET projectors"
  },
  "build": {
   "ignore_run_exports": [
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit",
    "cudatoolkit"
   ],
   "number": "0",
   "run_exports": [
    "parallelproj",
    "parallelproj * *cuda*",
    "parallelproj",
    "parallelproj * *cpu*",
    "parallelproj",
    "parallelproj * *cuda*",
    "parallelproj",
    "parallelproj * *cuda*",
    "parallelproj",
    "parallelproj * *cuda*"
   ],
   "string": "cuda11.0h1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm",
    "gschramm"
   ]
  },
  "package": {
   "name": "parallelproj",
   "version": "1.2.15"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake >=3.23",
    "ninja",
    "python"
   ],
   "host": [],
   "run": [
    "__cuda",
    "__cuda",
    "__cuda",
    "__cuda"
   ]
  },
  "source": {
   "sha256": "f8df33b05516145cdce773f3088dd2f9e92a7e081acf8395a3b2b9ffd74f5345",
   "url": "https://github.com/gschramm/parallelproj/archive/refs/tags/v1.2.15.tar.gz"
  },
  "test": {
   "commands": [
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1",
    "if not exist %LIBRARY_LIB%\\parallelproj_c.lib exit 1",
    "if not exist %LIBRARY_BIN%\\parallelproj_c.dll exit 1",
    "if not exist %LIBRARY_INC%\\parallelproj_c.h exit 1",
    "if not exist %LIBRARY_LIB%\\cmake\\parallelproj\\parallelprojConfig.cmake exit 1"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "ninja",
    "python"
   ]
  },
  "host": {
   "__set__": true,
   "elements": []
  },
  "run": {
   "__set__": true,
   "elements": [
    "__cuda"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 }
}