{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_aarch64": "linux_64",
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "default",
   "linux_ppc64le": "azure"
  }
 },
 "feedstock_name": "openmm",
 "linux_64_meta_yaml": {
  "about": {
   "description": "OpenMM is a toolkit for molecular simulation. It can be used either as a\nstand-alone application for running simulations, or as a library you call\nfrom your own code. It provides a combination of extreme flexibility\n(through custom forces and integrators), openness, and high performance\n(especially on recent GPUs) that make it truly unique among simulation\ncodes. OpenMM is MIT licensed with some LGPL portions (CUDA and OpenCL\nplatforms).\n",
   "dev_url": "https://github.com/openmm/openmm",
   "doc_url": "http://docs.openmm.org",
   "home": "http://openmm.org",
   "license": "LGPL-3.0-or-later",
   "license_family": "LGPL",
   "license_file": [
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt"
   ],
   "summary": "A high performance toolkit for molecular simulation."
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*"
   ],
   "number": "0",
   "script": [
    "env with_test_suite=true bash /tmp/tmp9r4qelcq/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpddagtqp1/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpxs11gsm0/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp0q0xv_u7/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmplwzpx0u_/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpwb2vt7i5/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpd3_wir4t/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpmrg08fzn/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp2kq6z6c8/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp1ho_cwde/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpf1ei5msg/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpx8jiy3ec/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp9vruc5dg/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp98iekdfy/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp4x3qus_0/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmphiih_bmh/build_openmm.sh"
   ],
   "script_env": [
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG"
   ],
   "track_features": null
  },
  "extra": {
   "recipe-maintainers": [
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm",
   "version": "8.0.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen"
   ],
   "host": [
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd"
   ],
   "run": [
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system"
   ],
   "run_constrained": null
  },
  "source": {
   "git_rev": "a780005",
   "git_url": "https://github.com/openmm/openmm.git"
  },
  "test": {
   "commands": [
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh"
   ],
   "files": [
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh"
   ],
   "imports": [
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm"
   ],
   "requires": [
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "doxygen",
    "make",
    "sysroot_linux-64"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "lxml",
    "numpy",
    "ocl-icd",
    "pthread-stubs",
    "python",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "git",
    "pocl",
    "pytest",
    "pytest-xdist"
   ]
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "description": "OpenMM is a toolkit for molecular simulation. It can be used either as a\nstand-alone application for running simulations, or as a library you call\nfrom your own code. It provides a combination of extreme flexibility\n(through custom forces and integrators), openness, and high performance\n(especially on recent GPUs) that make it truly unique among simulation\ncodes. OpenMM is MIT licensed with some LGPL portions (CUDA and OpenCL\nplatforms).\n",
   "dev_url": "https://github.com/openmm/openmm",
   "doc_url": "http://docs.openmm.org",
   "home": "http://openmm.org",
   "license": "LGPL-3.0-or-later",
   "license_family": "LGPL",
   "license_file": [
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt"
   ],
   "summary": "A high performance toolkit for molecular simulation."
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*"
   ],
   "number": "0",
   "script": [
    "env with_test_suite=true bash /tmp/tmpm18hpd45/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp005cxpwf/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmphhgfyjpl/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpo9q3vzrb/build_openmm.sh"
   ],
   "script_env": [
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG"
   ],
   "track_features": null
  },
  "extra": {
   "recipe-maintainers": [
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm",
   "version": "8.0.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "doxygen"
   ],
   "host": [
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd"
   ],
   "run": [
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system"
   ],
   "run_constrained": null
  },
  "source": {
   "git_rev": "a780005",
   "git_url": "https://github.com/openmm/openmm.git"
  },
  "test": {
   "commands": [
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh"
   ],
   "files": [
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh"
   ],
   "imports": [
    "openmm",
    "openmm",
    "openmm",
    "openmm"
   ],
   "requires": [
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "cxx_compiler_stub",
    "doxygen",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "lxml",
    "numpy",
    "ocl-icd",
    "pthread-stubs",
    "python",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "git",
    "pocl",
    "pytest",
    "pytest-xdist"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "OpenMM is a toolkit for molecular simulation. It can be used either as a\nstand-alone application for running simulations, or as a library you call\nfrom your own code. It provides a combination of extreme flexibility\n(through custom forces and integrators), openness, and high performance\n(especially on recent GPUs) that make it truly unique among simulation\ncodes. OpenMM is MIT licensed with some LGPL portions (CUDA and OpenCL\nplatforms).\n",
   "dev_url": "https://github.com/openmm/openmm",
   "doc_url": "http://docs.openmm.org",
   "home": "http://openmm.org",
   "license": "LGPL-3.0-or-later",
   "license_family": "LGPL",
   "license_file": [
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt"
   ],
   "summary": "A high performance toolkit for molecular simulation."
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libcuda.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll"
   ],
   "number": "0",
   "script": [
    "env with_test_suite=true bash /tmp/tmp9r4qelcq/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpddagtqp1/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpxs11gsm0/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp0q0xv_u7/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmplwzpx0u_/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpwb2vt7i5/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpd3_wir4t/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpmrg08fzn/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp2kq6z6c8/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp1ho_cwde/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpf1ei5msg/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpx8jiy3ec/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp9vruc5dg/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp98iekdfy/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp4x3qus_0/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmphiih_bmh/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpm18hpd45/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp005cxpwf/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmphhgfyjpl/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpo9q3vzrb/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpipnmhtx2/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp2z4_l1f1/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmplqbert3o/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp6r0i5vs_/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp_ycxzv9o/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpzt4w6a19/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpwx0luhe0/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp1zrw1t9d/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp29ec8a02/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmplqrxbya1/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpkxm06lhl/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpz141841l/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpyuaxrjut/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp_vj6rf3g/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpyxvm_mwi/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpw6l7_wbf/build_openmm.sh",
    "set with_test_suite=true &&   /tmp/tmp8v41yt3e\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmp4h3t893q\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmpuxgxdk14\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmpu4l6974y\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmp07o8i72f\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmp2os7j1ie\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmpqxcsqkyg\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmpvrk457r9\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmpqbvlhrp9\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmppm8yfpwz\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmpdxw6z__3\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmpecyl_h15\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmp31_huuy1\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmp_dae_o3v\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmpuh_gffxi\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmplxrbgniy\\build_openmm.bat"
   ],
   "script_env": [
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG"
   ],
   "string": "py38h1234567_0_khronos",
   "track_features": null
  },
  "extra": {
   "recipe-maintainers": [
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm",
   "version": "8.0.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cdt_stub",
    "sysroot_linux-64 2.17",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cdt_stub",
    "cmake",
    "make",
    "doxygen",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils"
   ],
   "host": [
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "ocl-icd",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader"
   ],
   "run": [
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader"
   ],
   "run_constrained": [
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9"
   ]
  },
  "source": {
   "git_rev": "a780005",
   "git_url": "https://github.com/openmm/openmm.git"
  },
  "test": {
   "commands": [
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat"
   ],
   "files": [
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat"
   ],
   "imports": [
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm"
   ],
   "requires": [
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pocl",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist"
   ]
  }
 },
 "name": "openmm",
 "osx_64_meta_yaml": {
  "about": {
   "description": "OpenMM is a toolkit for molecular simulation. It can be used either as a\nstand-alone application for running simulations, or as a library you call\nfrom your own code. It provides a combination of extreme flexibility\n(through custom forces and integrators), openness, and high performance\n(especially on recent GPUs) that make it truly unique among simulation\ncodes. OpenMM is MIT licensed with some LGPL portions (CUDA and OpenCL\nplatforms).\n",
   "dev_url": "https://github.com/openmm/openmm",
   "doc_url": "http://docs.openmm.org",
   "home": "http://openmm.org",
   "license": "LGPL-3.0-or-later",
   "license_family": "LGPL",
   "license_file": [
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt"
   ],
   "summary": "A high performance toolkit for molecular simulation."
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*"
   ],
   "number": "0",
   "script": [
    "env with_test_suite=true bash /tmp/tmpipnmhtx2/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp2z4_l1f1/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmplqbert3o/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp6r0i5vs_/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp_ycxzv9o/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpzt4w6a19/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpwx0luhe0/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp1zrw1t9d/build_openmm.sh"
   ],
   "script_env": [
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG"
   ],
   "string": "py310h1234567_0_khronos",
   "track_features": null
  },
  "extra": {
   "recipe-maintainers": [
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm",
   "version": "8.0.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build"
   ],
   "host": [
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader"
   ],
   "run": [
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple"
   ],
   "run_constrained": null
  },
  "source": {
   "git_rev": "a780005",
   "git_url": "https://github.com/openmm/openmm.git"
  },
  "test": {
   "commands": [
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh"
   ],
   "files": [
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh"
   ],
   "imports": [
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm"
   ],
   "requires": [
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "conda-build",
    "cxx_compiler_stub",
    "doxygen",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "khronos-opencl-icd-loader",
    "lxml",
    "numpy",
    "pthread-stubs",
    "python",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "khronos-opencl-icd-loader",
    "numpy",
    "ocl_icd_wrapper_apple",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "git",
    "pytest",
    "pytest-xdist"
   ]
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "description": "OpenMM is a toolkit for molecular simulation. It can be used either as a\nstand-alone application for running simulations, or as a library you call\nfrom your own code. It provides a combination of extreme flexibility\n(through custom forces and integrators), openness, and high performance\n(especially on recent GPUs) that make it truly unique among simulation\ncodes. OpenMM is MIT licensed with some LGPL portions (CUDA and OpenCL\nplatforms).\n",
   "dev_url": "https://github.com/openmm/openmm",
   "doc_url": "http://docs.openmm.org",
   "home": "http://openmm.org",
   "license": "LGPL-3.0-or-later",
   "license_family": "LGPL",
   "license_file": [
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt"
   ],
   "summary": "A high performance toolkit for molecular simulation."
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*",
    "*/libOpenCL.*"
   ],
   "number": "0",
   "script": [
    "env with_test_suite=true bash /tmp/tmp29ec8a02/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmplqrxbya1/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpkxm06lhl/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpz141841l/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpyuaxrjut/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmp_vj6rf3g/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpyxvm_mwi/build_openmm.sh",
    "env with_test_suite=true bash /tmp/tmpw6l7_wbf/build_openmm.sh"
   ],
   "script_env": [
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG"
   ],
   "string": "py38h1234567_0_khronos",
   "track_features": null
  },
  "extra": {
   "recipe-maintainers": [
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm",
   "version": "8.0.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "doxygen",
    "conda-build"
   ],
   "host": [
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader"
   ],
   "run": [
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "ocl_icd_wrapper_apple"
   ],
   "run_constrained": null
  },
  "source": {
   "git_rev": "a780005",
   "git_url": "https://github.com/openmm/openmm.git"
  },
  "test": {
   "commands": [
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh",
    "env with_test_suite=true bash test_openmm.sh"
   ],
   "files": [
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh",
    "test_openmm.sh"
   ],
   "imports": [
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm"
   ],
   "requires": [
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "conda-build",
    "cxx_compiler_stub",
    "doxygen",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "khronos-opencl-icd-loader",
    "lxml",
    "numpy",
    "pthread-stubs",
    "python",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "khronos-opencl-icd-loader",
    "numpy",
    "ocl_icd_wrapper_apple",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "git",
    "pytest",
    "pytest-xdist"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "openmm"
  ]
 },
 "parsing_error": false,
 "pr_info": {
  "__lazy_json__": "pr_info/openmm.json"
 },
 "raw_meta_yaml": "{% set name = \"openmm\" %}\n{% set version = \"8.0.0\" %}\n{% set build = 0 %}\n{% set with_test_suite = \"false\" %}\n#{% set with_test_suite = \"true\" %}  # [(osx and arm64)]\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  git_url: https://github.com/openmm/{{ name }}.git\n  git_rev: \"a780005\"\n\nbuild:\n  number: {{ build }}\n  string: \"py{{ PY_VER.replace('.', '') }}h{{ PKG_HASH }}_{{ build }}_{{ opencl_impl }}\"  # [osx]\n  track_features:  # make Apple OpenCL low priority\n    - openmm_opencl_apple  # [osx and (opencl_impl == 'apple')]\n  skip: true  # [(cuda_compiler_version in (undefined, 'None') and (linux64 or win)) or ((cuda_compiler_version != '10.2') and (ppc64le))]\n  script_env:\n    - CONFIG\n    - CUDA_HOME  # [ppc64le]\n  missing_dso_whitelist:\n    - \"*/libcuda.*\"    # [linux64 or ppc64le]\n    - \"*/libOpenCL.*\"  # [unix]\n    - \"*/nvcuda.dll\"   # [win]\n  script:\n    - env with_test_suite={{ with_test_suite }} bash {{ RECIPE_DIR }}/build_openmm.sh   # [unix]\n    - set with_test_suite={{ with_test_suite }} &&   {{ RECIPE_DIR }}\\build_openmm.bat  # [win]\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - cython                                 # [build_platform != target_platform]\n    - numpy                                  # [build_platform != target_platform]\n    - swig                                   # [build_platform != target_platform]\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [linux64 or ppc64le or win]\n    - {{ cdt('mesa-libgl-devel') }}  # [linux]\n    - sysroot_linux-64 2.17  # [linux64]\n    - cmake\n    - make  # [unix]\n    - jom  # [win]\n    # needed for Python wrappers\n    - doxygen\n{% if with_test_suite == 'true' %}\n    - conda-build  # [osx]\n    - m2-findutils  # [win]\n    - m2-coreutils  # [win]\n{% endif %}\n\n  host:\n    - python\n    - swig\n    - pthread-stubs\n    - lxml\n    - numpy\n    - cython\n    # OpenCL ICD\n    - ocl-icd  # [linux]\n    - khronos-opencl-icd-loader  # [win or (osx and opencl_impl == 'khronos')]\n\n  run:\n    - python\n    - numpy\n    # OpenCL ICD\n    - ocl-icd  # [linux]\n    - ocl-icd-system  # [linux]\n    - khronos-opencl-icd-loader  # [win or (osx and opencl_impl == 'khronos')]\n    - ocl_icd_wrapper_apple      # [osx and opencl_impl == 'khronos']\n\n  run_constrained:\n    - khronos-opencl-icd-loader  ==9999999999  # [osx and opencl_impl == 'apple']\n    - ocl_icd_wrapper_apple      ==9999999999  # [osx and opencl_impl == 'apple']\n    - python <3.9.9  # [py == 39 and win]\n\ntest:\n  requires:\n    - git\n    - pocl      # [linux]\n{% if with_test_suite == 'true' %}\n    - pytest\n    - pytest-xdist\n{% endif %}\n  files:\n    - test_openmm.sh   # [unix]\n    - test_openmm.bat  # [win]\n  imports:\n    - openmm\n  commands:\n    - env with_test_suite={{ with_test_suite }} bash test_openmm.sh   # [unix]\n    - set with_test_suite={{ with_test_suite }} && .\\test_openmm.bat  # [win]\n\nabout:\n  home: http://openmm.org\n  license: LGPL-3.0-or-later\n  license_family: LGPL\n  license_file:\n    - docs-source/licenses/Licenses.txt\n    - docs-source/licenses/LGPL.txt\n    - docs-source/licenses/GPL.txt\n  summary: A high performance toolkit for molecular simulation.\n\n  description: |\n    OpenMM is a toolkit for molecular simulation. It can be used either as a\n    stand-alone application for running simulations, or as a library you call\n    from your own code. It provides a combination of extreme flexibility\n    (through custom forces and integrators), openness, and high performance\n    (especially on recent GPUs) that make it truly unique among simulation\n    codes. OpenMM is MIT licensed with some LGPL portions (CUDA and OpenCL\n    platforms).\n  doc_url: http://docs.openmm.org\n  dev_url: https://github.com/openmm/openmm\n\nextra:\n  recipe-maintainers:\n    - mikemhenry\n    - jchodera\n    - jaimergp\n    - peastman\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cdt_stub",
   "cmake",
   "conda-build",
   "cuda_compiler_stub",
   "cxx_compiler_stub",
   "cython",
   "doxygen",
   "jom",
   "khronos-opencl-icd-loader",
   "lxml",
   "m2-coreutils",
   "m2-findutils",
   "make",
   "numpy",
   "ocl-icd",
   "ocl-icd-system",
   "ocl_icd_wrapper_apple",
   "pthread-stubs",
   "python",
   "swig",
   "sysroot_linux-64"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "conda-build",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "doxygen",
    "jom",
    "m2-coreutils",
    "m2-findutils",
    "make",
    "sysroot_linux-64"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "cython",
    "khronos-opencl-icd-loader",
    "lxml",
    "numpy",
    "ocl-icd",
    "pthread-stubs",
    "python",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "khronos-opencl-icd-loader",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "ocl_icd_wrapper_apple",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "git",
    "pocl",
    "pytest",
    "pytest-xdist"
   ]
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cdt_stub",
    "cmake",
    "conda-build",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "doxygen",
    "jom",
    "m2-coreutils",
    "m2-findutils",
    "make",
    "sysroot_linux-64 2.17"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "khronos-opencl-icd-loader",
    "lxml",
    "numpy",
    "ocl-icd",
    "pthread-stubs",
    "python",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "khronos-opencl-icd-loader",
    "numpy",
    "ocl-icd",
    "ocl-icd-system",
    "ocl_icd_wrapper_apple",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "git",
    "pocl",
    "pytest",
    "pytest-xdist"
   ]
  }
 },
 "url": null,
 "version": "8.0.0",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/openmm.json"
 },
 "win_64_meta_yaml": {
  "about": {
   "description": "OpenMM is a toolkit for molecular simulation. It can be used either as a\nstand-alone application for running simulations, or as a library you call\nfrom your own code. It provides a combination of extreme flexibility\n(through custom forces and integrators), openness, and high performance\n(especially on recent GPUs) that make it truly unique among simulation\ncodes. OpenMM is MIT licensed with some LGPL portions (CUDA and OpenCL\nplatforms).\n",
   "dev_url": "https://github.com/openmm/openmm",
   "doc_url": "http://docs.openmm.org",
   "home": "http://openmm.org",
   "license": "LGPL-3.0-or-later",
   "license_family": "LGPL",
   "license_file": [
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt",
    "docs-source/licenses/Licenses.txt",
    "docs-source/licenses/LGPL.txt",
    "docs-source/licenses/GPL.txt"
   ],
   "summary": "A high performance toolkit for molecular simulation."
  },
  "build": {
   "missing_dso_whitelist": [
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll",
    "*/nvcuda.dll"
   ],
   "number": "0",
   "script": [
    "set with_test_suite=true &&   /tmp/tmp8v41yt3e\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmp4h3t893q\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmpuxgxdk14\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmpu4l6974y\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmp07o8i72f\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmp2os7j1ie\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmpqxcsqkyg\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmpvrk457r9\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmpqbvlhrp9\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmppm8yfpwz\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmpdxw6z__3\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmpecyl_h15\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmp31_huuy1\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmp_dae_o3v\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmpuh_gffxi\\build_openmm.bat",
    "set with_test_suite=true &&   /tmp/tmplxrbgniy\\build_openmm.bat"
   ],
   "script_env": [
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG",
    "CONFIG"
   ],
   "track_features": null
  },
  "extra": {
   "recipe-maintainers": [
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman",
    "mikemhenry",
    "jchodera",
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm",
   "version": "8.0.0"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils",
    "c_compiler_stub",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "cmake",
    "jom",
    "doxygen",
    "m2-findutils",
    "m2-coreutils"
   ],
   "host": [
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader",
    "python",
    "swig",
    "pthread-stubs",
    "lxml",
    "numpy",
    "cython",
    "khronos-opencl-icd-loader"
   ],
   "run": [
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader",
    "python",
    "numpy",
    "khronos-opencl-icd-loader"
   ],
   "run_constrained": [
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9",
    "python <3.9.9"
   ]
  },
  "source": {
   "git_rev": "a780005",
   "git_url": "https://github.com/openmm/openmm.git"
  },
  "test": {
   "commands": [
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat",
    "set with_test_suite=true && .\\test_openmm.bat"
   ],
   "files": [
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat",
    "test_openmm.bat"
   ],
   "imports": [
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm",
    "openmm"
   ],
   "requires": [
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist",
    "git",
    "pytest",
    "pytest-xdist"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "doxygen",
    "jom",
    "m2-coreutils",
    "m2-findutils"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "khronos-opencl-icd-loader",
    "lxml",
    "numpy",
    "pthread-stubs",
    "python",
    "swig"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "khronos-opencl-icd-loader",
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "git",
    "pytest",
    "pytest-xdist"
   ]
  }
 }
}