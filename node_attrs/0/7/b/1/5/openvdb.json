{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "openvdb",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "OpenVDB is an open source C++ library comprising a novel hierarchical data structure and a large suite of tools for the efficient storage and manipulation of sparse volumetric data discretized on three-dimensional grids. It was developed by DreamWorks Animation for use in volumetric applications typically encountered in feature film production.\n",
   "dev_url": "https://github.com/AcademySoftwareFoundation/openvdb",
   "home": "https://github.com/AcademySoftwareFoundation/openvdb",
   "license": "MPL-2.0",
   "license_file": "LICENSE",
   "summary": "OpenVDB - Sparse volume data structure and tools"
  },
  "build": {
   "number": "2",
   "run_exports": [
    "openvdb",
    "openvdb",
    "openvdb",
    "openvdb"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "versatran01",
    "tetov",
    "versatran01",
    "tetov",
    "versatran01",
    "tetov",
    "versatran01",
    "tetov"
   ]
  },
  "package": {
   "name": "openvdb",
   "version": "10.0.1"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make"
   ],
   "host": [
    "blosc",
    "boost",
    "boost-cpp",
    "jemalloc",
    "numpy",
    "python",
    "tbb-devel",
    "zlib",
    "blosc",
    "boost",
    "boost-cpp",
    "jemalloc",
    "numpy",
    "python",
    "tbb-devel",
    "zlib",
    "blosc",
    "boost",
    "boost-cpp",
    "jemalloc",
    "numpy",
    "python",
    "tbb-devel",
    "zlib",
    "blosc",
    "boost",
    "boost-cpp",
    "jemalloc",
    "numpy",
    "python",
    "tbb-devel",
    "zlib"
   ],
   "run": [
    "numpy",
    "boost",
    "boost-cpp",
    "python",
    "numpy",
    "boost",
    "boost-cpp",
    "python",
    "numpy",
    "boost",
    "boost-cpp",
    "python",
    "numpy",
    "boost",
    "boost-cpp",
    "python"
   ]
  },
  "source": {
   "sha256": "887a3391fbd96b20c77914f4fb3ab4b33d26e5fc479aa036d395def5523c622f",
   "url": "https://github.com/AcademySoftwareFoundation/openvdb/archive/refs/tags/v10.0.1.tar.gz"
  },
  "test": {
   "commands": [
    "test -f ${PREFIX}/lib/libopenvdb.so.10.0.1",
    "test -f ${PREFIX}/lib/libopenvdb.so",
    "test -f ${PREFIX}/bin/vdb_print",
    "test -f ${PREFIX}/include/openvdb/openvdb.h",
    "test -f ${PREFIX}/lib/cmake/OpenVDB/FindOpenVDB.cmake",
    "vdb_print --help",
    "python -c \"import pyopenvdb; import numpy; grid = pyopenvdb.FloatGrid(); grid.copyFromArray(numpy.random.rand(200, 200, 200))\"",
    "test -f ${PREFIX}/lib/libopenvdb.so.10.0.1",
    "test -f ${PREFIX}/lib/libopenvdb.so",
    "test -f ${PREFIX}/bin/vdb_print",
    "test -f ${PREFIX}/include/openvdb/openvdb.h",
    "test -f ${PREFIX}/lib/cmake/OpenVDB/FindOpenVDB.cmake",
    "vdb_print --help",
    "python -c \"import pyopenvdb; import numpy; grid = pyopenvdb.FloatGrid(); grid.copyFromArray(numpy.random.rand(200, 200, 200))\"",
    "test -f ${PREFIX}/lib/libopenvdb.so.10.0.1",
    "test -f ${PREFIX}/lib/libopenvdb.so",
    "test -f ${PREFIX}/bin/vdb_print",
    "test -f ${PREFIX}/include/openvdb/openvdb.h",
    "test -f ${PREFIX}/lib/cmake/OpenVDB/FindOpenVDB.cmake",
    "vdb_print --help",
    "python -c \"import pyopenvdb; import numpy; grid = pyopenvdb.FloatGrid(); grid.copyFromArray(numpy.random.rand(200, 200, 200))\"",
    "test -f ${PREFIX}/lib/libopenvdb.so.10.0.1",
    "test -f ${PREFIX}/lib/libopenvdb.so",
    "test -f ${PREFIX}/bin/vdb_print",
    "test -f ${PREFIX}/include/openvdb/openvdb.h",
    "test -f ${PREFIX}/lib/cmake/OpenVDB/FindOpenVDB.cmake",
    "vdb_print --help",
    "python -c \"import pyopenvdb; import numpy; grid = pyopenvdb.FloatGrid(); grid.copyFromArray(numpy.random.rand(200, 200, 200))\""
   ],
   "imports": [
    "pyopenvdb",
    "pyopenvdb",
    "pyopenvdb",
    "pyopenvdb"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "blosc",
    "boost",
    "boost-cpp",
    "jemalloc",
    "numpy",
    "python",
    "tbb-devel",
    "zlib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "OpenVDB is an open source C++ library comprising a novel hierarchical data structure and a large suite of tools for the efficient storage and manipulation of sparse volumetric data discretized on three-dimensional grids. It was developed by DreamWorks Animation for use in volumetric applications typically encountered in feature film production.\n",
   "dev_url": "https://github.com/AcademySoftwareFoundation/openvdb",
   "home": "https://github.com/AcademySoftwareFoundation/openvdb",
   "license": "MPL-2.0",
   "license_file": "LICENSE",
   "summary": "OpenVDB - Sparse volume data structure and tools"
  },
  "build": {
   "number": "2",
   "run_exports": [
    "openvdb",
    "openvdb",
    "openvdb",
    "openvdb"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "versatran01",
    "tetov",
    "versatran01",
    "tetov",
    "versatran01",
    "tetov",
    "versatran01",
    "tetov"
   ]
  },
  "package": {
   "name": "openvdb",
   "version": "10.0.1"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make",
    "cxx_compiler_stub",
    "cmake",
    "make"
   ],
   "host": [
    "blosc",
    "boost",
    "boost-cpp",
    "jemalloc",
    "numpy",
    "python",
    "tbb-devel",
    "zlib",
    "blosc",
    "boost",
    "boost-cpp",
    "jemalloc",
    "numpy",
    "python",
    "tbb-devel",
    "zlib",
    "blosc",
    "boost",
    "boost-cpp",
    "jemalloc",
    "numpy",
    "python",
    "tbb-devel",
    "zlib",
    "blosc",
    "boost",
    "boost-cpp",
    "jemalloc",
    "numpy",
    "python",
    "tbb-devel",
    "zlib"
   ],
   "run": [
    "numpy",
    "boost",
    "boost-cpp",
    "python",
    "numpy",
    "boost",
    "boost-cpp",
    "python",
    "numpy",
    "boost",
    "boost-cpp",
    "python",
    "numpy",
    "boost",
    "boost-cpp",
    "python"
   ]
  },
  "source": {
   "sha256": "887a3391fbd96b20c77914f4fb3ab4b33d26e5fc479aa036d395def5523c622f",
   "url": "https://github.com/AcademySoftwareFoundation/openvdb/archive/refs/tags/v10.0.1.tar.gz"
  },
  "test": {
   "commands": [
    "test -f ${PREFIX}/lib/libopenvdb.so.10.0.1",
    "test -f ${PREFIX}/lib/libopenvdb.so",
    "test -f ${PREFIX}/bin/vdb_print",
    "test -f ${PREFIX}/include/openvdb/openvdb.h",
    "test -f ${PREFIX}/lib/cmake/OpenVDB/FindOpenVDB.cmake",
    "vdb_print --help",
    "python -c \"import pyopenvdb; import numpy; grid = pyopenvdb.FloatGrid(); grid.copyFromArray(numpy.random.rand(200, 200, 200))\"",
    "test -f ${PREFIX}/lib/libopenvdb.so.10.0.1",
    "test -f ${PREFIX}/lib/libopenvdb.so",
    "test -f ${PREFIX}/bin/vdb_print",
    "test -f ${PREFIX}/include/openvdb/openvdb.h",
    "test -f ${PREFIX}/lib/cmake/OpenVDB/FindOpenVDB.cmake",
    "vdb_print --help",
    "python -c \"import pyopenvdb; import numpy; grid = pyopenvdb.FloatGrid(); grid.copyFromArray(numpy.random.rand(200, 200, 200))\"",
    "test -f ${PREFIX}/lib/libopenvdb.so.10.0.1",
    "test -f ${PREFIX}/lib/libopenvdb.so",
    "test -f ${PREFIX}/bin/vdb_print",
    "test -f ${PREFIX}/include/openvdb/openvdb.h",
    "test -f ${PREFIX}/lib/cmake/OpenVDB/FindOpenVDB.cmake",
    "vdb_print --help",
    "python -c \"import pyopenvdb; import numpy; grid = pyopenvdb.FloatGrid(); grid.copyFromArray(numpy.random.rand(200, 200, 200))\"",
    "test -f ${PREFIX}/lib/libopenvdb.so.10.0.1",
    "test -f ${PREFIX}/lib/libopenvdb.so",
    "test -f ${PREFIX}/bin/vdb_print",
    "test -f ${PREFIX}/include/openvdb/openvdb.h",
    "test -f ${PREFIX}/lib/cmake/OpenVDB/FindOpenVDB.cmake",
    "vdb_print --help",
    "python -c \"import pyopenvdb; import numpy; grid = pyopenvdb.FloatGrid(); grid.copyFromArray(numpy.random.rand(200, 200, 200))\""
   ],
   "imports": [
    "pyopenvdb",
    "pyopenvdb",
    "pyopenvdb",
    "pyopenvdb"
   ]
  }
 },
 "name": "openvdb",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "openvdb"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/openvdb.json"
 },
 "raw_meta_yaml": "{% set version = \"10.0.1\" %}\n\npackage:\n  name: openvdb\n  version: {{ version }}\n\nsource:\n  url: https://github.com/AcademySoftwareFoundation/openvdb/archive/refs/tags/v{{ version }}.tar.gz\n  sha256: 887a3391fbd96b20c77914f4fb3ab4b33d26e5fc479aa036d395def5523c622f\n\nbuild:\n  number: 2\n  skip: true  # [win or osx]\n  run_exports:\n    - {{ pin_subpackage('openvdb', max_pin='x') }}\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - cmake\n    - make  # [unix]\n\n  host:\n    - blosc\n    - boost\n    - boost-cpp\n    - jemalloc\n    - numpy\n    - python\n    - tbb-devel\n    - zlib\n\n  run:\n    - {{ pin_compatible('numpy') }}\n    - boost\n    - boost-cpp\n    - python\n\ntest:\n  commands:\n    - test -f ${PREFIX}/lib/libopenvdb.so.{{ version }}  # [unix]\n    - test -f ${PREFIX}/lib/libopenvdb.so  # [unix]\n    - test -f ${PREFIX}/bin/vdb_print  # [unix]\n    - test -f ${PREFIX}/include/openvdb/openvdb.h  # [unix]\n    - test -f ${PREFIX}/lib/cmake/OpenVDB/FindOpenVDB.cmake  # [unix]\n    - if not exist %PREFIX%\\lib\\libopenvdb.dll.{{ version }} exit 1  # [win]\n    - if not exist %PREFIX%\\lib\\libopenvdb.dll exit 1  # [win]\n    - if not exist %PREFIX%\\bin\\vdb_print exit 1  # [win]\n    - if not exist %PREFIX%\\include\\opendb\\opendvdb.h exit 1  # [win]\n    - if not exist %PREFIX%\\lib\\cmake\\FindOpenVDB.cmake exit 1  # [win]\n    - vdb_print --help\n    # test numpy support\n    - python -c \"import pyopenvdb; import numpy; grid = pyopenvdb.FloatGrid(); grid.copyFromArray(numpy.random.rand(200, 200, 200))\"\n  imports:\n    - pyopenvdb\n\nabout:\n  home: https://github.com/AcademySoftwareFoundation/openvdb\n  summary: 'OpenVDB - Sparse volume data structure and tools'\n  description: |\n    OpenVDB is an open source C++ library comprising a novel hierarchical data structure and a large suite of tools for the efficient storage and manipulation of sparse volumetric data discretized on three-dimensional grids. It was developed by DreamWorks Animation for use in volumetric applications typically encountered in feature film production.\n  license: MPL-2.0\n  license_file: LICENSE\n  dev_url: https://github.com/AcademySoftwareFoundation/openvdb\n\nextra:\n  recipe-maintainers:\n    - versatran01\n    - tetov\n",
 "req": {
  "__set__": true,
  "elements": [
   "blosc",
   "boost",
   "boost-cpp",
   "cmake",
   "cxx_compiler_stub",
   "jemalloc",
   "make",
   "numpy",
   "python",
   "tbb-devel",
   "zlib"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "blosc",
    "boost",
    "boost-cpp",
    "cxx_compiler_stub",
    "jemalloc",
    "numpy",
    "python",
    "tbb-devel",
    "zlib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "cxx_compiler_stub",
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "blosc",
    "boost",
    "boost-cpp",
    "jemalloc",
    "numpy",
    "python",
    "tbb-devel",
    "zlib"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "boost",
    "boost-cpp",
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/AcademySoftwareFoundation/openvdb/archive/refs/tags/v10.0.1.tar.gz",
 "version": "10.0.1",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/openvdb.json"
 }
}