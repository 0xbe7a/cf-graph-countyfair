{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "abacus",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "ABACUS (Atomic-orbital Based Ab-initio Computation at UStc) is an open-source package based on density functional theory (DFT). The package utilizes both plane wave and numerical atomic basis sets with the usage of norm-conserving pseudopotentials to describe the interactions between nuclear ions and valence electrons. ABACUS supports LDA, GGA, meta-GGA, and hybrid functionals. Apart from single-point calculations, the package allows geometry optimizations and ab-initio molecular dynamics with various ensembles.\n",
   "dev_url": "https://github.com/deepmodeling/abacus-develop",
   "doc_url": "https://abacus.deepmodeling.com/",
   "home": "http://abacus.ustc.edu.cn/",
   "license": "LGPL-3.0-only AND MIT",
   "license_family": "LGPL",
   "license_file": [
    "LICENSE",
    "libnpy.LICENSE",
    "LICENSE",
    "libnpy.LICENSE",
    "LICENSE",
    "libnpy.LICENSE",
    "LICENSE",
    "libnpy.LICENSE"
   ],
   "summary": "An electronic structure package based on plane wave and numerical atomic basis sets."
  },
  "build": {
   "number": "0",
   "script": "export CMAKE_PREFIX_PATH=`python -c \"import torch;print(torch.__path__[0])\"`/share/cmake:$CMAKE_PREFIX_PATH\nif [[ ${cuda_compiler_version} != \"None\" ]]; then\n  export CMAKE_ARGS=\"-DUSE_CUDA=1 ${CMAKE_ARGS}\"\nfi\ncmake -B conda_build ${CMAKE_ARGS} -DCMAKE_BUILD_TYPE=Release -DENABLE_DEEPKS=1 -DENABLE_LIBXC=1\ncmake --build conda_build -j`nproc`\ncmake --install conda_build\n",
   "string": "cuda_mpi_openmpi_h1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "njzjz",
    "caic99",
    "njzjz",
    "caic99",
    "njzjz",
    "caic99",
    "njzjz",
    "caic99"
   ]
  },
  "package": {
   "name": "abacus",
   "version": "3.3.1"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "make",
    "cmake",
    "libgomp",
    "cxx_compiler_stub",
    "make",
    "cmake",
    "libgomp",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "libgomp",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "libgomp"
   ],
   "host": [
    "openmpi",
    "openblas",
    "elpa",
    "elpa * mpi_openmpi_*",
    "fftw",
    "fftw * mpi_openmpi_*",
    "cereal",
    "pytorch",
    "pytorch * cpu_*",
    "libxc-c",
    "libxc-c * cpu_*",
    "openmpi",
    "openblas",
    "elpa",
    "elpa * mpi_openmpi_*",
    "fftw",
    "fftw * mpi_openmpi_*",
    "cereal",
    "pytorch",
    "pytorch * cpu_*",
    "libxc-c",
    "libxc-c * cpu_*",
    "openmpi",
    "openblas",
    "elpa",
    "elpa * mpi_openmpi_*",
    "fftw",
    "fftw * mpi_openmpi_*",
    "cereal",
    "pytorch",
    "pytorch * cpu_*",
    "libxc-c",
    "libxc-c * cuda_*",
    "openmpi",
    "openblas",
    "elpa",
    "elpa * mpi_openmpi_*",
    "fftw",
    "fftw * mpi_openmpi_*",
    "cereal",
    "pytorch",
    "pytorch * cpu_*",
    "libxc-c",
    "libxc-c * cuda_*"
   ],
   "run": [
    "openmpi",
    "scalapack",
    "libopenblas",
    "openblas",
    "pytorch cpu*",
    "openmpi",
    "scalapack",
    "libopenblas",
    "openblas",
    "pytorch cpu*",
    "openmpi",
    "scalapack",
    "libopenblas",
    "openblas",
    "pytorch cuda*",
    "openmpi",
    "scalapack",
    "libopenblas",
    "openblas",
    "pytorch cuda*"
   ]
  },
  "source": {
   "sha256": "29e1a78e1e370e45c5730df4a4b5ae52de74d0cf86771ca9f62dde34643f0f2d",
   "url": "https://github.com/deepmodeling/abacus-develop/archive/v3.3.1.tar.gz"
  },
  "test": {
   "commands": [
    "export OMPI_MCA_plm=isolated OMPI_MCA_btl_vader_single_copy_mechanism=none OMPI_MCA_rmaps_base_oversubscribe=yes",
    "abacus --version",
    "export OMPI_MCA_plm=isolated OMPI_MCA_btl_vader_single_copy_mechanism=none OMPI_MCA_rmaps_base_oversubscribe=yes",
    "abacus --version",
    "export OMPI_MCA_plm=isolated OMPI_MCA_btl_vader_single_copy_mechanism=none OMPI_MCA_rmaps_base_oversubscribe=yes",
    "abacus --version",
    "export OMPI_MCA_plm=isolated OMPI_MCA_btl_vader_single_copy_mechanism=none OMPI_MCA_rmaps_base_oversubscribe=yes",
    "abacus --version"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "libgomp",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cereal",
    "elpa",
    "fftw",
    "libxc-c",
    "openblas",
    "openmpi",
    "pytorch"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "libopenblas",
    "openblas",
    "openmpi",
    "pytorch",
    "scalapack"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "meta_yaml": {
  "about": {
   "description": "ABACUS (Atomic-orbital Based Ab-initio Computation at UStc) is an open-source package based on density functional theory (DFT). The package utilizes both plane wave and numerical atomic basis sets with the usage of norm-conserving pseudopotentials to describe the interactions between nuclear ions and valence electrons. ABACUS supports LDA, GGA, meta-GGA, and hybrid functionals. Apart from single-point calculations, the package allows geometry optimizations and ab-initio molecular dynamics with various ensembles.\n",
   "dev_url": "https://github.com/deepmodeling/abacus-develop",
   "doc_url": "https://abacus.deepmodeling.com/",
   "home": "http://abacus.ustc.edu.cn/",
   "license": "LGPL-3.0-only AND MIT",
   "license_family": "LGPL",
   "license_file": [
    "LICENSE",
    "libnpy.LICENSE",
    "LICENSE",
    "libnpy.LICENSE",
    "LICENSE",
    "libnpy.LICENSE",
    "LICENSE",
    "libnpy.LICENSE"
   ],
   "summary": "An electronic structure package based on plane wave and numerical atomic basis sets."
  },
  "build": {
   "number": "0",
   "script": "export CMAKE_PREFIX_PATH=`python -c \"import torch;print(torch.__path__[0])\"`/share/cmake:$CMAKE_PREFIX_PATH\nif [[ ${cuda_compiler_version} != \"None\" ]]; then\n  export CMAKE_ARGS=\"-DUSE_CUDA=1 ${CMAKE_ARGS}\"\nfi\ncmake -B conda_build ${CMAKE_ARGS} -DCMAKE_BUILD_TYPE=Release -DENABLE_DEEPKS=1 -DENABLE_LIBXC=1\ncmake --build conda_build -j`nproc`\ncmake --install conda_build\n",
   "string": "cuda_mpi_openmpi_h1234567_0"
  },
  "extra": {
   "recipe-maintainers": [
    "njzjz",
    "caic99",
    "njzjz",
    "caic99",
    "njzjz",
    "caic99",
    "njzjz",
    "caic99"
   ]
  },
  "package": {
   "name": "abacus",
   "version": "3.3.1"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "make",
    "cmake",
    "libgomp",
    "cxx_compiler_stub",
    "make",
    "cmake",
    "libgomp",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "libgomp",
    "cxx_compiler_stub",
    "cuda_compiler_stub",
    "make",
    "cmake",
    "libgomp"
   ],
   "host": [
    "openmpi",
    "openblas",
    "elpa",
    "elpa * mpi_openmpi_*",
    "fftw",
    "fftw * mpi_openmpi_*",
    "cereal",
    "pytorch",
    "pytorch * cpu_*",
    "libxc-c",
    "libxc-c * cpu_*",
    "openmpi",
    "openblas",
    "elpa",
    "elpa * mpi_openmpi_*",
    "fftw",
    "fftw * mpi_openmpi_*",
    "cereal",
    "pytorch",
    "pytorch * cpu_*",
    "libxc-c",
    "libxc-c * cpu_*",
    "openmpi",
    "openblas",
    "elpa",
    "elpa * mpi_openmpi_*",
    "fftw",
    "fftw * mpi_openmpi_*",
    "cereal",
    "pytorch",
    "pytorch * cpu_*",
    "libxc-c",
    "libxc-c * cuda_*",
    "openmpi",
    "openblas",
    "elpa",
    "elpa * mpi_openmpi_*",
    "fftw",
    "fftw * mpi_openmpi_*",
    "cereal",
    "pytorch",
    "pytorch * cpu_*",
    "libxc-c",
    "libxc-c * cuda_*"
   ],
   "run": [
    "openmpi",
    "scalapack",
    "libopenblas",
    "openblas",
    "pytorch cpu*",
    "openmpi",
    "scalapack",
    "libopenblas",
    "openblas",
    "pytorch cpu*",
    "openmpi",
    "scalapack",
    "libopenblas",
    "openblas",
    "pytorch cuda*",
    "openmpi",
    "scalapack",
    "libopenblas",
    "openblas",
    "pytorch cuda*"
   ]
  },
  "source": {
   "sha256": "29e1a78e1e370e45c5730df4a4b5ae52de74d0cf86771ca9f62dde34643f0f2d",
   "url": "https://github.com/deepmodeling/abacus-develop/archive/v3.3.1.tar.gz"
  },
  "test": {
   "commands": [
    "export OMPI_MCA_plm=isolated OMPI_MCA_btl_vader_single_copy_mechanism=none OMPI_MCA_rmaps_base_oversubscribe=yes",
    "abacus --version",
    "export OMPI_MCA_plm=isolated OMPI_MCA_btl_vader_single_copy_mechanism=none OMPI_MCA_rmaps_base_oversubscribe=yes",
    "abacus --version",
    "export OMPI_MCA_plm=isolated OMPI_MCA_btl_vader_single_copy_mechanism=none OMPI_MCA_rmaps_base_oversubscribe=yes",
    "abacus --version",
    "export OMPI_MCA_plm=isolated OMPI_MCA_btl_vader_single_copy_mechanism=none OMPI_MCA_rmaps_base_oversubscribe=yes",
    "abacus --version"
   ]
  }
 },
 "name": "abacus",
 "outputs_names": {
  "__set__": true,
  "elements": [
   "abacus"
  ]
 },
 "parsing_error": "make_graph: 502",
 "platforms": [
  "linux_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/abacus.json"
 },
 "raw_meta_yaml": "{% set name = \"abacus\" %}\n{% set version = \"3.3.1\" %}\n{% set proc_type = \"cuda\" if cuda_compiler_version != \"None\" else \"cpu\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/deepmodeling/abacus-develop/archive/v{{ version }}.tar.gz\n  sha256: 29e1a78e1e370e45c5730df4a4b5ae52de74d0cf86771ca9f62dde34643f0f2d\n\nbuild:\n  script: |\n    export CMAKE_PREFIX_PATH=`python -c \"import torch;print(torch.__path__[0])\"`/share/cmake:$CMAKE_PREFIX_PATH\n    if [[ ${cuda_compiler_version} != \"None\" ]]; then\n      export CMAKE_ARGS=\"-DUSE_CUDA=1 ${CMAKE_ARGS}\"\n    fi\n    cmake -B conda_build ${CMAKE_ARGS} -DCMAKE_BUILD_TYPE=Release -DENABLE_DEEPKS=1 -DENABLE_LIBXC=1\n    cmake --build conda_build -j`nproc`\n    cmake --install conda_build\n  number: 0\n  skip: true  # [not linux]\n  string: {{ proc_type }}_mpi_{{ mpi }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [cuda_compiler_version != \"None\"]\n    - make\n    - cmake\n    - llvm-openmp  # [osx]\n    - libgomp      # [linux]\n\n  host:\n    - {{ mpi }}\n    - openblas\n    - elpa\n    - elpa * mpi_{{ mpi }}_*\n    - fftw\n    - fftw * mpi_{{ mpi }}_*\n    - cereal\n    - pytorch\n    - pytorch * cpu_*\n    - libxc-c\n    - libxc-c * {{ proc_type }}_*\n\n  run:\n    - {{ mpi }}\n    - scalapack\n    - libopenblas\n    - openblas\n    - {{ pin_compatible('pytorch', max_pin='x.x') }} {{ proc_type }}*\n\ntest:\n  commands:\n    - export OMPI_MCA_plm=isolated OMPI_MCA_btl_vader_single_copy_mechanism=none OMPI_MCA_rmaps_base_oversubscribe=yes  # [mpi == \"openmpi\"]\n    - abacus --version\n    - mpirun -n 2 abacus --version  # [mpi == \"mpich\"]\n\nabout:\n  home: http://abacus.ustc.edu.cn/\n  doc_url: https://abacus.deepmodeling.com/\n  dev_url: https://github.com/deepmodeling/abacus-develop\n  license: LGPL-3.0-only AND MIT\n  license_family: LGPL\n  license_file:\n    - LICENSE\n    - libnpy.LICENSE\n  summary: An electronic structure package based on plane wave and numerical atomic basis sets.\n  description: >\n    ABACUS (Atomic-orbital Based Ab-initio Computation at UStc) is an open-source package based on density functional theory (DFT). The package utilizes both plane wave and numerical atomic basis sets with the usage of norm-conserving pseudopotentials to describe the interactions between nuclear ions and valence electrons.\n    ABACUS supports LDA, GGA, meta-GGA, and hybrid functionals. Apart from single-point calculations, the package allows geometry optimizations and ab-initio molecular dynamics with various ensembles.\n\nextra:\n  recipe-maintainers:\n    - njzjz\n    - caic99\n",
 "req": {
  "__set__": true,
  "elements": [
   "cereal",
   "cmake",
   "cuda_compiler_stub",
   "cxx_compiler_stub",
   "elpa",
   "fftw",
   "libgomp",
   "libopenblas",
   "libxc-c",
   "make",
   "openblas",
   "openmpi",
   "pytorch",
   "scalapack"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "libgomp",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cereal",
    "ctng-compilers",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "elpa",
    "fftw",
    "libxc-c",
    "openblas",
    "openmpi",
    "pytorch"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "ctng-compilers",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "libopenblas",
    "openblas",
    "openmpi",
    "pytorch",
    "scalapack"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cuda_compiler_stub",
    "cxx_compiler_stub",
    "libgomp",
    "make"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cereal",
    "elpa",
    "elpa * mpi_openmpi_*",
    "fftw",
    "fftw * mpi_openmpi_*",
    "libxc-c",
    "libxc-c * cpu_*",
    "libxc-c * cuda_*",
    "openblas",
    "openmpi",
    "pytorch",
    "pytorch * cpu_*"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "libopenblas",
    "openblas",
    "openmpi",
    "pytorch cpu*",
    "pytorch cuda*",
    "scalapack"
   ]
  },
  "test": {
   "__set__": true,
   "elements": []
  }
 },
 "url": "https://github.com/deepmodeling/abacus-develop/archive/v3.3.1.tar.gz",
 "version": "3.3.1",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/abacus.json"
 }
}