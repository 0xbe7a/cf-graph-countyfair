{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {},
 "feedstock_name": "libleidenalg",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "description": "This package implements the Leiden algorithm in C++. It relies on igraph for\nit to function. Besides the relative flexibility of the implementation, it\nalso scales well, and can be run on graphs of millions of nodes (as long as\nthey can fit in memory). The core class is the Optimiser class which is able\nto optimize a variety of quality functions using the Leiden algorithm.\n",
   "dev_url": "https://github.com/vtraag/libleidenalg",
   "home": "https://github.com/vtraag/libleidenalg",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "LICENSE",
   "summary": "Leiden is a general algorithm for methods of community detection in large networks."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "libleidenalg"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "vtraag"
   ]
  },
  "package": {
   "name": "libleidenalg",
   "version": "0.10.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ],
   "host": [
    "igraph >=0.10,<0.11"
   ]
  },
  "source": {
   "patches": [
    "001-cmake-fix-link-libraries.patch"
   ],
   "sha256": "ae265fb718e2233bfd01e3bc9679d9bed53a182e4cb13dbb12b49e6e92105cc7",
   "url": "https://github.com/vtraag/libleidenalg/archive/refs/tags/0.10.0.tar.gz"
  },
  "test": {
   "files": [
    "test.cpp"
   ],
   "requires": [
    "cxx_compiler_stub"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "igraph"
   ]
  },
  "run": {
   "__set__": true,
   "elements": []
  },
  "test": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "description": "This package implements the Leiden algorithm in C++. It relies on igraph for\nit to function. Besides the relative flexibility of the implementation, it\nalso scales well, and can be run on graphs of millions of nodes (as long as\nthey can fit in memory). The core class is the Optimiser class which is able\nto optimize a variety of quality functions using the Leiden algorithm.\n",
   "dev_url": "https://github.com/vtraag/libleidenalg",
   "home": "https://github.com/vtraag/libleidenalg",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "LICENSE",
   "summary": "Leiden is a general algorithm for methods of community detection in large networks."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "libleidenalg",
    "libleidenalg",
    "libleidenalg"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "vtraag",
    "vtraag",
    "vtraag"
   ]
  },
  "package": {
   "name": "libleidenalg",
   "version": "0.10.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja",
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ],
   "host": [
    "igraph >=0.10,<0.11",
    "igraph >=0.10,<0.11",
    "igraph >=0.10,<0.11"
   ]
  },
  "source": {
   "patches": [
    "001-cmake-fix-link-libraries.patch",
    "001-cmake-fix-link-libraries.patch",
    "001-cmake-fix-link-libraries.patch"
   ],
   "sha256": "ae265fb718e2233bfd01e3bc9679d9bed53a182e4cb13dbb12b49e6e92105cc7",
   "url": "https://github.com/vtraag/libleidenalg/archive/refs/tags/0.10.0.tar.gz"
  },
  "test": {
   "files": [
    "test.cpp",
    "test.cpp",
    "test.cpp"
   ],
   "requires": [
    "cxx_compiler_stub",
    "cxx_compiler_stub",
    "cxx_compiler_stub"
   ]
  }
 },
 "name": "libleidenalg",
 "osx_64_meta_yaml": {
  "about": {
   "description": "This package implements the Leiden algorithm in C++. It relies on igraph for\nit to function. Besides the relative flexibility of the implementation, it\nalso scales well, and can be run on graphs of millions of nodes (as long as\nthey can fit in memory). The core class is the Optimiser class which is able\nto optimize a variety of quality functions using the Leiden algorithm.\n",
   "dev_url": "https://github.com/vtraag/libleidenalg",
   "home": "https://github.com/vtraag/libleidenalg",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "LICENSE",
   "summary": "Leiden is a general algorithm for methods of community detection in large networks."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "libleidenalg"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "vtraag"
   ]
  },
  "package": {
   "name": "libleidenalg",
   "version": "0.10.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ],
   "host": [
    "igraph >=0.10,<0.11"
   ]
  },
  "source": {
   "patches": [
    "001-cmake-fix-link-libraries.patch"
   ],
   "sha256": "ae265fb718e2233bfd01e3bc9679d9bed53a182e4cb13dbb12b49e6e92105cc7",
   "url": "https://github.com/vtraag/libleidenalg/archive/refs/tags/0.10.0.tar.gz"
  },
  "test": {
   "files": [
    "test.cpp"
   ],
   "requires": [
    "cxx_compiler_stub"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "igraph"
   ]
  },
  "run": {
   "__set__": true,
   "elements": []
  },
  "test": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "libleidenalg"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64",
  "win_64",
  "osx_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/libleidenalg.json"
 },
 "raw_meta_yaml": "{% set name = \"libleidenalg\" %}\n{% set version = \"0.10.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url:  https://github.com/vtraag/libleidenalg/archive/refs/tags/{{ version }}.tar.gz\n  sha256: ae265fb718e2233bfd01e3bc9679d9bed53a182e4cb13dbb12b49e6e92105cc7\n  patches:\n    - 001-cmake-fix-link-libraries.patch\n\nbuild:\n  number: 0\n  run_exports:\n    - {{ pin_subpackage(\"libleidenalg\", max_pin=\"x.x\") }}\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - cmake\n    - ninja\n  host:\n    - igraph >=0.10,<0.11\n\ntest:\n  files:\n    - test.cpp\n  requires:\n    - {{ compiler('cxx') }}\n\nabout:\n  home: https://github.com/vtraag/libleidenalg\n  summary: 'Leiden is a general algorithm for methods of community detection in large networks.'\n  description: |\n    This package implements the Leiden algorithm in C++. It relies on igraph for\n    it to function. Besides the relative flexibility of the implementation, it\n    also scales well, and can be run on graphs of millions of nodes (as long as\n    they can fit in memory). The core class is the Optimiser class which is able\n    to optimize a variety of quality functions using the Leiden algorithm.\n  license: GPL-3.0-or-later\n  license_family: GPL\n  license_file: LICENSE\n  dev_url: https://github.com/vtraag/libleidenalg\n\nextra:\n  recipe-maintainers:\n    - vtraag\n",
 "req": {
  "__set__": true,
  "elements": [
   "cmake",
   "cxx_compiler_stub",
   "igraph",
   "ninja"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub",
    "igraph"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "igraph >=0.10,<0.11"
   ]
  },
  "run": {
   "__set__": true,
   "elements": []
  },
  "test": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  }
 },
 "url": "https://github.com/vtraag/libleidenalg/archive/refs/tags/0.10.0.tar.gz",
 "version": "0.10.0",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/libleidenalg.json"
 },
 "win_64_meta_yaml": {
  "about": {
   "description": "This package implements the Leiden algorithm in C++. It relies on igraph for\nit to function. Besides the relative flexibility of the implementation, it\nalso scales well, and can be run on graphs of millions of nodes (as long as\nthey can fit in memory). The core class is the Optimiser class which is able\nto optimize a variety of quality functions using the Leiden algorithm.\n",
   "dev_url": "https://github.com/vtraag/libleidenalg",
   "home": "https://github.com/vtraag/libleidenalg",
   "license": "GPL-3.0-or-later",
   "license_family": "GPL",
   "license_file": "LICENSE",
   "summary": "Leiden is a general algorithm for methods of community detection in large networks."
  },
  "build": {
   "number": "0",
   "run_exports": [
    "libleidenalg"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "vtraag"
   ]
  },
  "package": {
   "name": "libleidenalg",
   "version": "0.10.0"
  },
  "requirements": {
   "build": [
    "cxx_compiler_stub",
    "cmake",
    "ninja"
   ],
   "host": [
    "igraph >=0.10,<0.11"
   ]
  },
  "source": {
   "patches": [
    "001-cmake-fix-link-libraries.patch"
   ],
   "sha256": "ae265fb718e2233bfd01e3bc9679d9bed53a182e4cb13dbb12b49e6e92105cc7",
   "url": "https://github.com/vtraag/libleidenalg/archive/refs/tags/0.10.0.tar.gz"
  },
  "test": {
   "files": [
    "test.cpp"
   ],
   "requires": [
    "cxx_compiler_stub"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "cmake",
    "cxx_compiler_stub",
    "ninja"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "igraph"
   ]
  },
  "run": {
   "__set__": true,
   "elements": []
  },
  "test": {
   "__set__": true,
   "elements": [
    "cxx_compiler_stub"
   ]
  }
 }
}