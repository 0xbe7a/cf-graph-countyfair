{
 "archived": false,
 "branch": "main",
 "conda-forge.yml": {
  "build_platform": {
   "linux_ppc64le": "linux_64",
   "osx_arm64": "osx_64"
  },
  "provider": {
   "linux_aarch64": "azure",
   "linux_ppc64le": "default",
   "win": "azure"
  }
 },
 "feedstock_name": "shapely",
 "hash_type": "sha256",
 "linux_64_meta_yaml": {
  "about": {
   "home": "https://github.com/shapely/shapely",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE.txt",
   "summary": "Python package for manipulation and analysis of geometric objects in the Cartesian plane"
  },
  "build": {
   "number": "2",
   "script": [
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews"
   ]
  },
  "package": {
   "name": "shapely",
   "version": "2.0.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "66a6b1a3e72ece97fc85536a281476f9b7794de2e646ca8a4517e2e3c1446893",
   "url": "https://pypi.io/packages/source/S/Shapely/shapely-2.0.1.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests"
   ],
   "imports": [
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ],
   "source_files": [
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests"
   ]
  }
 },
 "linux_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "geos",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "linux_aarch64_meta_yaml": {
  "about": {
   "home": "https://github.com/shapely/shapely",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE.txt",
   "summary": "Python package for manipulation and analysis of geometric objects in the Cartesian plane"
  },
  "build": {
   "number": "2",
   "script": [
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews"
   ]
  },
  "package": {
   "name": "shapely",
   "version": "2.0.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "66a6b1a3e72ece97fc85536a281476f9b7794de2e646ca8a4517e2e3c1446893",
   "url": "https://pypi.io/packages/source/S/Shapely/shapely-2.0.1.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests"
   ],
   "imports": [
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ],
   "source_files": [
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests"
   ]
  }
 },
 "linux_aarch64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "geos",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "linux_ppc64le_meta_yaml": {
  "about": {
   "home": "https://github.com/shapely/shapely",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE.txt",
   "summary": "Python package for manipulation and analysis of geometric objects in the Cartesian plane"
  },
  "build": {
   "number": "2",
   "script": [
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews"
   ]
  },
  "package": {
   "name": "shapely",
   "version": "2.0.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "66a6b1a3e72ece97fc85536a281476f9b7794de2e646ca8a4517e2e3c1446893",
   "url": "https://pypi.io/packages/source/S/Shapely/shapely-2.0.1.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests"
   ],
   "imports": [
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ],
   "source_files": [
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests"
   ]
  }
 },
 "linux_ppc64le_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "geos",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "meta_yaml": {
  "about": {
   "home": "https://github.com/shapely/shapely",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE.txt",
   "summary": "Python package for manipulation and analysis of geometric objects in the Cartesian plane"
  },
  "build": {
   "number": "2",
   "script": [
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "set GEOS_INCLUDE_PATH=%LIBRARY_INC%",
    "set GEOS_LIBRARY_PATH=%LIBRARY_LIB%",
    "PYTHON -m pip install . -vv",
    "set GEOS_INCLUDE_PATH=%LIBRARY_INC%",
    "set GEOS_LIBRARY_PATH=%LIBRARY_LIB%",
    "PYTHON -m pip install . -vv",
    "set GEOS_INCLUDE_PATH=%LIBRARY_INC%",
    "set GEOS_LIBRARY_PATH=%LIBRARY_LIB%",
    "PYTHON -m pip install . -vv",
    "set GEOS_INCLUDE_PATH=%LIBRARY_INC%",
    "set GEOS_LIBRARY_PATH=%LIBRARY_LIB%",
    "PYTHON -m pip install . -vv",
    "set GEOS_INCLUDE_PATH=%LIBRARY_INC%",
    "set GEOS_LIBRARY_PATH=%LIBRARY_LIB%",
    "PYTHON -m pip install . -vv",
    "set GEOS_INCLUDE_PATH=%LIBRARY_INC%",
    "set GEOS_LIBRARY_PATH=%LIBRARY_LIB%",
    "PYTHON -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews"
   ]
  },
  "package": {
   "name": "shapely",
   "version": "2.0.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "66a6b1a3e72ece97fc85536a281476f9b7794de2e646ca8a4517e2e3c1446893",
   "url": "https://pypi.io/packages/source/S/Shapely/shapely-2.0.1.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests"
   ],
   "imports": [
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ],
   "source_files": [
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests"
   ]
  }
 },
 "name": "shapely",
 "osx_64_meta_yaml": {
  "about": {
   "home": "https://github.com/shapely/shapely",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE.txt",
   "summary": "Python package for manipulation and analysis of geometric objects in the Cartesian plane"
  },
  "build": {
   "number": "2",
   "script": [
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews"
   ]
  },
  "package": {
   "name": "shapely",
   "version": "2.0.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "66a6b1a3e72ece97fc85536a281476f9b7794de2e646ca8a4517e2e3c1446893",
   "url": "https://pypi.io/packages/source/S/Shapely/shapely-2.0.1.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests"
   ],
   "imports": [
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ],
   "source_files": [
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests"
   ]
  }
 },
 "osx_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "geos",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "osx_arm64_meta_yaml": {
  "about": {
   "home": "https://github.com/shapely/shapely",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE.txt",
   "summary": "Python package for manipulation and analysis of geometric objects in the Cartesian plane"
  },
  "build": {
   "number": "2",
   "script": [
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv",
    "PYTHON -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews"
   ]
  },
  "package": {
   "name": "shapely",
   "version": "2.0.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "66a6b1a3e72ece97fc85536a281476f9b7794de2e646ca8a4517e2e3c1446893",
   "url": "https://pypi.io/packages/source/S/Shapely/shapely-2.0.1.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests"
   ],
   "imports": [
    "shapely",
    "shapely",
    "shapely",
    "shapely"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ],
   "source_files": [
    "tests",
    "tests",
    "tests",
    "tests"
   ]
  }
 },
 "osx_arm64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "geos",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "outputs_names": {
  "__set__": true,
  "elements": [
   "shapely"
  ]
 },
 "parsing_error": false,
 "platforms": [
  "linux_64",
  "linux_aarch64",
  "linux_ppc64le",
  "osx_64",
  "osx_arm64",
  "win_64"
 ],
 "pr_info": {
  "__lazy_json__": "pr_info/shapely.json"
 },
 "raw_meta_yaml": "{% set version = \"2.0.1\" %}\n\npackage:\n  name: shapely\n  version: {{ version.split('.post')[0] }}\n\nsource:\n  url: https://pypi.io/packages/source/S/Shapely/shapely-{{ version }}.tar.gz\n  sha256: 66a6b1a3e72ece97fc85536a281476f9b7794de2e646ca8a4517e2e3c1446893\n\nbuild:\n  number: 2\n  script:\n    - set GEOS_INCLUDE_PATH=%LIBRARY_INC%  # [win]\n    - set GEOS_LIBRARY_PATH=%LIBRARY_LIB%  # [win]\n    - {{ PYTHON }} -m pip install . -vv\n\nrequirements:\n  build:\n    - python                                 # [build_platform != target_platform]\n    - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n    - cython <3                              # [build_platform != target_platform]\n    - numpy                                  # [build_platform != target_platform]\n    - geos                                   # [build_platform != target_platform]\n    - {{ compiler('c') }}\n  host:\n    - python\n    - pip\n    - cython <3\n    - numpy\n    - geos\n  run:\n    - python\n    - {{ pin_compatible('numpy') }}\n\ntest:\n  source_files:\n    - tests\n  requires:\n    - pytest\n  imports:\n    - shapely\n  commands:\n    # geos 3.12 tests skipped until next release\n    {% set tests_to_skip = \"test_coverage_union_overlapping_inputs\" %}\n    {% set tests_to_skip = tests_to_skip + \" or test_coverage_union_non_polygon_inputs\" %}\n    {% set tests_to_skip = tests_to_skip + \" or test_to_wkt_multipoint_with_point_empty\" %}\n    {% set tests_to_skip = tests_to_skip + \" or test_minimum_rotated_rectangle\" %}\n    {% set tests_to_skip = tests_to_skip + \" or test_oriented_envelope\" %}\n    - python -m pytest -k \"not ({{ tests_to_skip }})\" --pyargs shapely.tests\n\nabout:\n  home: https://github.com/shapely/shapely\n  license: BSD-3-Clause\n  license_file: LICENSE.txt\n  summary: Python package for manipulation and analysis of geometric objects in the Cartesian plane\n\nextra:\n  recipe-maintainers:\n    - akrherz\n    - ocefpaf\n    - pelson\n    - phobson\n    - xylar\n    - jorisvandenbossche\n    - mwtoews\n",
 "req": {
  "__set__": true,
  "elements": [
   "c_compiler_stub",
   "cython",
   "geos",
   "numpy",
   "pip",
   "python"
  ]
 },
 "requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "cython",
    "geos",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "c_compiler_stub",
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "strong_exports": false,
 "total_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython <3",
    "geos",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 },
 "url": "https://pypi.io/packages/source/S/Shapely/shapely-2.0.1.tar.gz",
 "version": "2.0.1",
 "version_pr_info": {
  "__lazy_json__": "version_pr_info/shapely.json"
 },
 "win_64_meta_yaml": {
  "about": {
   "home": "https://github.com/shapely/shapely",
   "license": "BSD-3-Clause",
   "license_file": "LICENSE.txt",
   "summary": "Python package for manipulation and analysis of geometric objects in the Cartesian plane"
  },
  "build": {
   "number": "2",
   "script": [
    "set GEOS_INCLUDE_PATH=%LIBRARY_INC%",
    "set GEOS_LIBRARY_PATH=%LIBRARY_LIB%",
    "PYTHON -m pip install . -vv",
    "set GEOS_INCLUDE_PATH=%LIBRARY_INC%",
    "set GEOS_LIBRARY_PATH=%LIBRARY_LIB%",
    "PYTHON -m pip install . -vv",
    "set GEOS_INCLUDE_PATH=%LIBRARY_INC%",
    "set GEOS_LIBRARY_PATH=%LIBRARY_LIB%",
    "PYTHON -m pip install . -vv",
    "set GEOS_INCLUDE_PATH=%LIBRARY_INC%",
    "set GEOS_LIBRARY_PATH=%LIBRARY_LIB%",
    "PYTHON -m pip install . -vv",
    "set GEOS_INCLUDE_PATH=%LIBRARY_INC%",
    "set GEOS_LIBRARY_PATH=%LIBRARY_LIB%",
    "PYTHON -m pip install . -vv",
    "set GEOS_INCLUDE_PATH=%LIBRARY_INC%",
    "set GEOS_LIBRARY_PATH=%LIBRARY_LIB%",
    "PYTHON -m pip install . -vv"
   ]
  },
  "extra": {
   "recipe-maintainers": [
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews",
    "akrherz",
    "ocefpaf",
    "pelson",
    "phobson",
    "xylar",
    "jorisvandenbossche",
    "mwtoews"
   ]
  },
  "package": {
   "name": "shapely",
   "version": "2.0.1"
  },
  "requirements": {
   "build": [
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub",
    "c_compiler_stub"
   ],
   "host": [
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos",
    "python",
    "pip",
    "cython <3",
    "numpy",
    "geos"
   ],
   "run": [
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy",
    "python",
    "numpy"
   ]
  },
  "source": {
   "sha256": "66a6b1a3e72ece97fc85536a281476f9b7794de2e646ca8a4517e2e3c1446893",
   "url": "https://pypi.io/packages/source/S/Shapely/shapely-2.0.1.tar.gz"
  },
  "test": {
   "commands": [
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests",
    "python -m pytest -k \"not (test_coverage_union_overlapping_inputs or test_coverage_union_non_polygon_inputs or test_to_wkt_multipoint_with_point_empty or test_minimum_rotated_rectangle or test_oriented_envelope)\" --pyargs shapely.tests"
   ],
   "imports": [
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely",
    "shapely"
   ],
   "requires": [
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest",
    "pytest"
   ],
   "source_files": [
    "tests",
    "tests",
    "tests",
    "tests",
    "tests",
    "tests"
   ]
  }
 },
 "win_64_requirements": {
  "build": {
   "__set__": true,
   "elements": [
    "c_compiler_stub"
   ]
  },
  "host": {
   "__set__": true,
   "elements": [
    "cython",
    "geos",
    "numpy",
    "pip",
    "python"
   ]
  },
  "run": {
   "__set__": true,
   "elements": [
    "numpy",
    "python"
   ]
  },
  "test": {
   "__set__": true,
   "elements": [
    "pytest"
   ]
  }
 }
}